module org.sparcs.gnu.parser.InputGrammar;

header {
import java.util.List;
import java.util.ArrayList;

import org.jdom2.Document;
import org.jdom2.Element;
}

body {
	private Document d;
	private Element root;
	private String curType;
	private String curName;
	private String curCode;
	private boolean isM;

	private void initD(String name, String code) {
		d = new Document();
		root = new Element("졸업요건");
	    d.setRootElement(root);
	    root.setAttribute("name", name + "학과");
	    root.setAttribute("code", code);
	    curCode = code;
	}
	
	private void makeElement(String value, String original, String min, List<Element> l1, List<Element> l2) {
		String tName = value.equals("au") ? "AU" : "학점";
		Element e = new Element("조건");
		e.setAttribute("name", curType+tName);
		if(isM) {
			e.addContent((new Element("쿼리")).setText("SELECT SUM(`" + value + "`) FROM `grade` WHERE `type`='" + curType + "' AND `grade`!='F' AND `grade`!='U' AND `grade`!='W' AND `grade`!='I' AND `grade`!='R' AND SUBSTR(`number`,1,2)='" + curCode + "'"));
			e.addContent((new Element("목록")).setText("SELECT `code`,`" + value + "` FROM `grade` WHERE `type`='" + curType + "' AND `grade`!='F' AND `grade`!='U' AND `grade`!='W' AND `grade`!='I' AND `grade`!='R' AND SUBSTR(`number`,1,2)='" + curCode + "' ORDER BY `code`"));
		}
		else {
			e.addContent((new Element("쿼리")).setText("SELECT SUM(`" + value + "`) FROM `grade` WHERE `type`='" + curType + "' AND `grade`!='F' AND `grade`!='U' AND `grade`!='W' AND `grade`!='I' AND `grade`!='R'"));
			e.addContent((new Element("목록")).setText("SELECT `code`,`" + value + "` FROM `grade` WHERE `type`='" + curType + "' AND `grade`!='F' AND `grade`!='U' AND `grade`!='W' AND `grade`!='I' AND `grade`!='R' ORDER BY `code`"));
		}
		e.addContent((new Element("최소")).setText(min));
		if(original.equals("없음")) {
			e.addContent((new Element("원문")).setText(curName + " " + original));
		}
		else {
			e.addContent((new Element("원문")).setText(curName + " " + min + original));
		}
		
		if(l1 != null) {
			for(Element elem : l1) {
				e.addContent(elem);
			}
		}
		
		if(l2 != null) {
			for(Element elem : l2) {
				e.addContent(elem);
			}
		}
		
		root.addContent(e);
	}
}

option parser(org.sparcs.gnu.parser.InputGrammar);

public Document Spec =
	Dept w Total w General w Basic w Major w Elective w Research w English w Foreign w Etc w EndOfFile
	{
		yyValue = d;
	};

private void Dept =
	"[" name:DeptName "학과"? ":" n1:Number "]"
	{
		initD(name, n1);
	};

private String DeptName =
	name:("전산"/"전자")
	{
		yyValue = name;
	};

private void Total =
	"총" w n1:Number w "학점" w "평점" w f1:FNumber w "/" w f2:FNumber w "이상"
	{
		curType = "이수학점";
		curName = curType;
		Element e = new Element("조건");
		e.setAttribute("name", curType);
		e.addContent((new Element("쿼리")).setText("SELECT `value` FROM `metadata` WHERE `index`='total_credit'"));
		e.addContent((new Element("최소")).setText(n1));
		e.addContent((new Element("원문")).setText("총 " + n1 + "학점"));
		root.addContent(e);

		curType = "평점";
		curName = curType;
		e = new Element("조건");
		e.setAttribute("name", curType);
		e.addContent((new Element("쿼리")).setText("SELECT `value` FROM `metadata` WHERE `index`='gpa'"));
		e.addContent((new Element("최소")).setText(f1));
		e.addContent((new Element("원문")).setText("평점 " + f1 + "/" + f2 + " 이상"));
		root.addContent(e);
	};

private void General =
	MdtrG w Condition w EltvG w Condition
	{
	};

private void MdtrG =
	name:("교양필수"/"교필")
	{
		curType = "교필";
		curName = name;
		isM = false;
	};

private void EltvG =
	name:("인문사회선택"/"인사선"/"인선")
	{
		curType = "인선";
		curName = name;
		isM = false;
	};

private void Basic =
	MdtrB w Condition w EltvB w Condition
	{
	};

private void MdtrB =
	name:("기초필수"/"기필")
	{
		curType = "기필";
		curName = name;
		isM = false;
	};

private void EltvB =
	name:("기초선택"/"기선")
	{
		curType = "기선";
		curName = name;
		isM = false;
	};

private void Major =
	MdtrM w Condition w EltvM w Condition 
	{
	};

private void MdtrM =
	name:("전공필수"/"전필")
	{
		curType = "전필";
		curName = name;
		isM = true;
	};

private void EltvM =
	name:("전공선택"/"전선")
	{
		curType = "전선";
		curName = name;
		isM = true;
	};

private void Elective =
	ElectiveName w Condition
	{
	};

private void ElectiveName =
	name:("자유선택"/"자선")
	{
		curType = "자선";
		curName = name;
		isM = false;
	};

private void Research =
	ResearchName w Condition
	{
	};

private void ResearchName =
	name:("연구과목"/"연구")
	{
		curType = "연구";
		curName = name;
		isM = false;
	};

private Element English =
	w
	{
		yyValue = new Element("영어성적");
	};

private Element Foreign =
	w
	{
		yyValue = new Element("외국인");
	};

private Element Etc =
	w
	{
		yyValue = new Element("복부전");
	};

private void Condition =
		n1:Number w "학점" w n2:Number w "AU" w e1:MandCourse? w e2:ReplCourse?
		{
			makeElement("credit", "학점", n1, e1, e2);
			makeElement("au", "AU", n2, e1, e2);
		}
	/	n1:Number w "학점" w "이상" w e1:MandCourse? w e2:ReplCourse?
		{
			makeElement("credit", "학점 이상", n1, e1, e2);
		}
	/	n1:Number w "학점" w e1:MandCourse? w e2:ReplCourse?
		{
			makeElement("credit", "학점", n1, e1, e2);
		}
	/	"없음" w e1:MandCourse? w e2:ReplCourse?
		{
			makeElement("credit", "없음", "0", e1, e2);
		};

private List<Element> MandCourse =
	"(" w l:Courses w ")"
	{
		yyValue = l;
	};

private List<Element> Courses =
		e:Course1 w "," w l:Courses
		{
			l.add(0, e);
			
			yyValue = l;
		}
	/	e:Course1
		{
			List<Element> l = new ArrayList<Element>();
			l.add(e);
			
			yyValue = l;
		};

private List<Element> ReplCourse =
	"[" w l:Repls w "]"
	{
		yyValue = l;
	};

private List<Element> Repls =
		e:Repl w "," w l:Repls
		{
			l.add(0, e);

			yyValue = l;
		}
	/	e:Repl
		{
			List<Element> l = new ArrayList<Element>();
			l.add(e);

			yyValue = l;
		};

private Element Repl =
	c1:Course2 w "->" w c2:Course2 (w n:Credit)?
	{
		Element e = new Element("예외");
		e.addContent((new Element("쿼리")).setText("SELECT (`left`.`count` = 1) AND (`right`.`count` = 0) FROM (SELECT COUNT(*) AS `count` FROM `grade` WHERE `code`='"+c1+"' AND `grade`!='F' AND `grade`!='U' AND `grade`!='W' AND `grade`!='I' AND `grade`!='R') AS `left`, (SELECT COUNT(*) AS `count` FROM `grade` WHERE `code`='"+c2+"' AND `grade`!='F' AND `grade`!='U' AND `grade`!='W' AND `grade`!='I' AND `grade`!='R') AS `right`"));
		e.addContent((new Element("좌변")).setText(c1));
		e.addContent((new Element("우변")).setText(c2));
		e.addContent((new Element("우변코드")).setText(curCode));
		e.addContent((new Element("학점")).setText((n!=null)?n:"3"));

		yyValue = e;
	};

private Element Course1 =
	f:[a-zA-Z]+ n1:Number n2:Credit
	{
		String s = "";
		for(Character c : f) s += c;
		Element e = new Element("필수");
		e.addContent((new Element("쿼리")).setText("SELECT COUNT(*) > 0 FROM `grade` WHERE `code`='" + s + n1 + "' AND `grade`!='F' AND `grade`!='U' AND `grade`!='W' AND `grade`!='I' AND `grade`!='R'"));
		e.addContent((new Element("코드")).setText(s+n1));
		e.addContent((new Element("학점")).setText(n2));

		yyValue = e;
	};

private String Course2 =
	f:[a-zA-Z]+ b:Number
	{
		String s = "";
		for(Character c : f) s += c;

		yyValue = s + b;
	};

private String Credit =
	"(" w n:Number w ")"
	{
		yyValue = n;
	};

private String Number =
	a:[0-9]+
	{
		String t = "";
		for(Character c : a) t += c;
		yyValue = t;
	};

private String FNumber =
	a:[0-9]+ '.' aa:[0-9]+
	{
		String t = "";
		for(Character c : a) t += c;
		t += '.';
		for(Character c : aa) t += c;
		yyValue = t;
	};

private void	w =			Space*{/*System.out.println("blank");*/};
private void	EndOfFile =!_{};

private void Space =
		EOL
		{
		}
	/	'\t'
		{
		}
	/	' '
		{
		};

private void EOL =
		'\r' '\n'
		{
		}
	/	'\r'
		{
		}
	/	'\n'
		{
		};